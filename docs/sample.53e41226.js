(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[function(t,s,e){"use strict";e.r(s);class i{constructor({canvasWidth:t,canvasHeight:s,waveWidth:e=.055,waveHeight:i=6,xOffset:a=0,speed:h=.04,colors:n=["#DBB77A","#BF8F3B"]}={}){this.points=[],this.startX=0,this.canvasWidth=t,this.canvasHeight=s,this.waveWidth=e,this.waveHeight=i,this.xOffset=a,this.speed=h,this.colors=n}getChartColor(t){const s=this.canvasWidth/2,e=t.createLinearGradient(s,s,s,this.canvasHeight);return e.addColorStop(0,this.colors[0]),e.addColorStop(1,this.colors[1]),e}render(t){const s=this.points;t.save(),t.beginPath(),this.points.forEach(s=>{t.lineTo(s.x,s.y)}),t.lineTo(this.canvasWidth,this.canvasHeight),t.lineTo(this.startX,this.canvasHeight),t.lineTo(s[0].x,s[0].y),t.fillStyle=this.getChartColor(t),t.fill(),t.restore()}createPointsMap({currentLine:t}){this.points=[];const{startX:s,waveHeight:e,waveWidth:i,canvasWidth:a,canvasHeight:h,xOffset:n}=this;for(let r=s;r<s+a;r+=20/a){const a=Math.sin((s+r)*i+n);this.points.push({x:r,y:h*(1-t/100)+a*e})}this.xOffset+=this.speed}}new class{constructor({el:t,canvasWidth:s=500,canvasHeight:e=500,waterline:a=60,colors:h=["#F39C6B","#A0563B","rgba(243, 156, 107, 0.48)","rgba(160, 86, 59, 0.48)"]}){if("string"!=typeof t)throw new Error("Parameter el should be a String !");const n=this.canvas=document.querySelector(t);this.canvasWidth=n.width=s,this.canvasHeight=n.height=e,this.hasRenderedContainer=!1,this.currentLine=0,this.waterline=a,this.colors=h,this.waves=[new i({canvasWidth:this.canvasWidth,canvasHeight:this.canvasHeight,waveWidth:.055,waveHeight:4,colors:[this.colors[0],this.colors[1]],xOffset:0,speed:.04}),new i({canvasWidth:this.canvasWidth,canvasHeight:this.canvasHeight,waveWidth:.04,waveHeight:7,colors:[this.colors[2],this.colors[3]],xOffset:2,speed:.02})]}render(t=5){const s=this.canvas.getContext("2d");s.clearRect(0,0,this.canvasWidth,this.canvasHeight),this.hasRenderedContainer||this.drawContainer(s),this.currentLine<this.waterline&&(this.currentLine+=1),this.waves.forEach((e,i)=>{e.createPointsMap({currentLine:this.currentLine+i*t}),e.render(s)}),window.requestAnimationFrame(this.render.bind(this,t))}drawContainer(t){const s=this.canvasWidth/2,e=s-4;t.lineWidth=4,t.beginPath(),t.arc(s,s,e,0,2*Math.PI),t.strokeStyle="rgba(186, 165, 130, 0.3)",t.stroke(),t.clip(),this.hasRenderedContainer=!0}}({el:"#chart",canvasWidth:300,canvasHeight:300,waterline:60,colors:["#F39C6B","#A0563B","rgba(243, 156, 107, 0.48)","rgba(160, 86, 59, 0.48)"]}).render(5)}],[[0,0]]]);